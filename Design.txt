
THE DESIGN OF HANGMAN - A UDACITY FSND PROJECT 
----------------------------------------------


This project took me about four weeks to complete and consisted of three phases. 
- The first one was to play with the Guess-A-Number project to wrap my head around the different concepts.
- The second phase was about making the first decision of picking a game to implement.
- The third and final phase was the actual implementation. I started from the Guess-A-Number skeleton files and modified and built them up follwing the task-list provided in the instructions.



A) Modifications to models provided
-----------------------------------
My main objective when modifying the models provided was to customise them for the Hangman game while maintaining the logic integrity of the structure.

- User: I added the final_score property to the User model as I wanted to make it easy to store, tally up and retrieve a user's overall performance. 

- Score: here I mostly modified the properties to fit the pecliarities of the game:
  * unique_letters: this is a critical element of the scoring algorithm so I decided to store it here.
  * mistakes_made: same as above
  * game_status: this is string that provided a human readble status rather than a boolean status
  * final_score: it is only calculted at the end of the game as I only wanted to rate completed games. Placing it here is intended on keeping the overall structure logical
  * date: I removed the date property to move it to the game history. This way, the date of each move is preserved instead of keeping a single one.

- Game: I modified the Game's structure rather heavily as I wanted it to store most of the game information that was not directly related to scoring. In hindsight, one of the main drivers for this was to keep all of the information in one place to keep the queries as simple as possible: 
  * mistakes_made: number of mistakes made 
  * strikes_left: number of strikes left
  * game_won: has the game been won
  * game_cancelled: has the game been cancelled 
  * current_game: what is the current state of the game, which letters have been revealed.
  * game_sequence: which round has just been played
  * game_history: this is probably the most important change: storing the state of a full game after a turn has been played. It is effectively a structured properly that stores the game's state after each turn. There I could have decided to make it a completely seperate model form the game but decided that it was more logical to store it in the game itself.




B) Trade-offs and struggles faced when implementing the new game logic
----------------------------------------------------------------------
- Exploring the game logic:  I chose hangman and decided to explore the implications of the game before fully launching into the project. 
As I wanted to be free to explore the game's concepts without worrying about the seperate issue of its API implementation, I wrote a single-file game called game_logic_exploration.py. This proved to be a double-edge sword kind of decision as explain in the section below about refactoring.
My main struggle was to realise and implement the fact that all the game's logic was relying on the seemingly simplest api point: play_turn. It was difficult to keep track of all the possible behaviour of the gane based on a single-letter entry.

- Refactoring: my main learning here is : don't wait until the end to refactor.
I copied and pasted most of the game_logic_exploration.py in to my play_turn endpoint and used the file as-is to build the entire game.
When everything was said and done, I ended up with a function that was over 80 lines long, i.e. rather hard to maintain and debug. Therefore, I had to go through a painful process of refactoring.

Even as I stand back now, I can see a few more opportunities for refactoring. One of the main trade-off is probably that I built in a bit of redundancy between the Score and Game models in order to keep the queries simple.

There is always room for improvement!
